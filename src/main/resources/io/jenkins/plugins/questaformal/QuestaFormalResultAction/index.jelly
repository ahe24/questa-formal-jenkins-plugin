<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
    <l:layout title="Questa Formal Analysis Results">
        <l:side-panel>
            <st:include page="sidepanel.jelly" it="${it.run}" optional="true" />
        </l:side-panel>
        <l:main-panel>
            <h1>Questa Formal Analysis Results</h1>
            
            <div class="info-section">
                <div class="info-grid">
                    <div class="info-left">
                        <div class="info-row">
                            <span class="info-label">Design:</span>
                            <span class="info-value">${it.lintDesign}</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Timestamp:</span>
                            <span class="info-value">${it.lintTimestamp}</span>
                        </div>
                    </div>
                    <div class="info-right">
                        <div class="quality-score">
                            <div class="score-bar">
                                <div class="score-track">
                                    <div class="score-sections">
                                        <div class="section poor">Poor</div>
                                        <div class="section normal">Normal</div>
                                        <div class="section good">Good</div>
                                    </div>
                                    <div class="score-value">
                                        <div class="score-bubble">
                                            <span class="value">${it.qualityScore}%</span>
                                        </div>
                                        <div class="score-marker"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="score-label">Quality Score</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="results-section">
                <h2>Lint Results</h2>
                <div class="results-grid">
                    <div class="chart-card">
                        <h3>Overall Results</h3>
                        <div id="chart-wrapper">
                            <canvas id="lintResultsChart"></canvas>
                        </div>
                    </div>
                    <div class="chart-card">
                        <h3>Error Details</h3>
                        <div id="error-chart-wrapper">
                            <canvas id="errorDetailsChart"></canvas>
                        </div>
                    </div>
                    <div class="chart-card">
                        <h3>Warning Details</h3>
                        <div id="warning-chart-wrapper">
                            <canvas id="warningDetailsChart"></canvas>
                        </div>
                    </div>
                    <div class="chart-card">
                        <h3>Info Details</h3>
                        <div id="info-chart-wrapper">
                            <canvas id="infoDetailsChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="details-section">
                <h2>Details</h2>
                <div class="details-content">
                    <j:if test="${!empty(it.lintErrors)}">
                        <div class="check-section error">
                            <div class="section-header" onclick="toggleSection(this)">
                                <h3>Errors (${it.lintErrorCount})</h3>
                                <span class="toggle-icon">▼</span>
                            </div>
                            <div class="section-content">
                                <j:forEach var="check" items="${it.lintErrors}">
                                    <div class="check-item">
                                        <div class="check-header" onclick="toggleCheck(this)">
                                            <span class="check-name">${check.name}</span>
                                            <span class="check-meta">
                                                <span class="check-category">Error</span>
                                                <span class="check-count">${check.count}</span>
                                                <span class="toggle-icon">▼</span>
                                            </span>
                                        </div>
                                        <div class="check-details">
                                            <div class="check-description">${check.details}</div>
                                            <j:if test="${!empty(check.occurrences)}">
                                                <ul class="occurrence-list">
                                                    <j:forEach var="occurrence" items="${check.occurrences}">
                                                        <li class="occurrence-item">${occurrence}</li>
                                                    </j:forEach>
                                                </ul>
                                            </j:if>
                                        </div>
                                    </div>
                                </j:forEach>
                            </div>
                        </div>
                    </j:if>
                    
                    <j:if test="${!empty(it.lintWarnings)}">
                        <div class="check-section warning">
                            <div class="section-header" onclick="toggleSection(this)">
                                <h3>Warnings (${it.lintWarningCount})</h3>
                                <span class="toggle-icon">▼</span>
                            </div>
                            <div class="section-content">
                                <j:forEach var="check" items="${it.lintWarnings}">
                                    <div class="check-item">
                                        <div class="check-header" onclick="toggleCheck(this)">
                                            <span class="check-name">${check.name}</span>
                                            <span class="check-meta">
                                                <span class="check-category">Warning</span>
                                                <span class="check-count">${check.count}</span>
                                                <span class="toggle-icon">▼</span>
                                            </span>
                                        </div>
                                        <div class="check-details">
                                            <div class="check-description">${check.details}</div>
                                            <j:if test="${!empty(check.occurrences)}">
                                                <ul class="occurrence-list">
                                                    <j:forEach var="occurrence" items="${check.occurrences}">
                                                        <li class="occurrence-item">${occurrence}</li>
                                                    </j:forEach>
                                                </ul>
                                            </j:if>
                                        </div>
                                    </div>
                                </j:forEach>
                            </div>
                        </div>
                    </j:if>
                    
                    <j:if test="${!empty(it.lintInfo)}">
                        <div class="check-section info">
                            <div class="section-header" onclick="toggleSection(this)">
                                <h3>Info (${it.lintInfoCount})</h3>
                                <span class="toggle-icon">▼</span>
                            </div>
                            <div class="section-content">
                                <j:forEach var="check" items="${it.lintInfo}">
                                    <div class="check-item">
                                        <div class="check-header" onclick="toggleCheck(this)">
                                            <span class="check-name">${check.name}</span>
                                            <span class="check-meta">
                                                <span class="check-category">Info</span>
                                                <span class="check-count">${check.count}</span>
                                                <span class="toggle-icon">▼</span>
                                            </span>
                                        </div>
                                        <div class="check-details">
                                            <div class="check-description">${check.details}</div>
                                            <j:if test="${!empty(check.occurrences)}">
                                                <ul class="occurrence-list">
                                                    <j:forEach var="occurrence" items="${check.occurrences}">
                                                        <li class="occurrence-item">${occurrence}</li>
                                                    </j:forEach>
                                                </ul>
                                            </j:if>
                                        </div>
                                    </div>
                                </j:forEach>
                            </div>
                        </div>
                    </j:if>
                </div>
            </div>
            
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <j:set var="errorJson" value="${it.lintErrorsJson()}"/>
            <j:set var="warningJson" value="${it.lintWarningsJson()}"/>
            <j:set var="infoJson" value="${it.lintInfoJson()}"/>
            <script><![CDATA[
                // 차트 데이터 초기화
                const errorItems = ${errorJson != null ? errorJson : '[]'};
                const warningItems = ${warningJson != null ? warningJson : '[]'};
                const infoItems = ${infoJson != null ? infoJson : '[]'};

                // Quality Score 애니메이션
                function animateQualityScore() {
                    const score = ${it.qualityScore};
                    const duration = 2500;
                    const scoreValue = document.querySelector('.score-value .value');
                    const scoreBubble = document.querySelector('.score-bubble');
                    const scoreMarker = document.querySelector('.score-marker');
                    
                    let startValue = 0;
                    const startTime = performance.now();
                    
                    function getColorForScore(value) {
                        if (value <= 50) {
                            return {
                                color: '#dc3545',
                                bgColor: 'rgba(220, 53, 69, 0.1)'
                            };
                        } else if (value <= 80) {
                            return {
                                color: '#ffc107',
                                bgColor: 'rgba(255, 193, 7, 0.1)'
                            };
                        } else {
                            return {
                                color: '#28a745',
                                bgColor: 'rgba(40, 167, 69, 0.1)'
                            };
                        }
                    }
                    
                    function updateScoreClass(value) {
                        scoreBubble.classList.remove('poor', 'normal', 'good');
                        scoreMarker.classList.remove('poor', 'normal', 'good');
                        const colors = getColorForScore(value);
                        
                        if (value <= 50) {
                            scoreBubble.classList.add('poor');
                            scoreMarker.classList.add('poor');
                        } else if (value <= 80) {
                            scoreBubble.classList.add('normal');
                            scoreMarker.classList.add('normal');
                        } else {
                            scoreBubble.classList.add('good');
                            scoreMarker.classList.add('good');
                        }
                    }
                    
                    function updateScore(currentTime) {
                        const elapsed = currentTime - startTime;
                        const progress = Math.min(elapsed / duration, 1);
                        
                        // easeOutExpo 애니메이션
                        const easeProgress = progress === 1 ? 1 : 1 - Math.pow(2, -10 * progress);
                        const currentValue = easeProgress * score;
                        
                        // 소수점 한 자리까지 표시
                        scoreValue.textContent = currentValue.toFixed(1) + '%';
                        
                        // 점수 풍선과 마커를 동시에 이동
                        const position = currentValue + '%';
                        scoreBubble.style.left = position;
                        scoreMarker.style.left = position;
                        
                        // 구간에 따른 색상 변경
                        updateScoreClass(currentValue);
                        
                        if (progress < 1) {
                            requestAnimationFrame(updateScore);
                        }
                    }
                    
                    // 초기 상태 설정
                    updateScoreClass(startValue);
                    requestAnimationFrame(updateScore);
                }

                // Chart.js 로드 확인 및 오류 처리
                function checkChartJsLoaded() {
                    if (typeof Chart === 'undefined') {
                        console.error('Chart.js failed to load');
                        document.querySelectorAll('.chart-card').forEach(card => {
                            card.innerHTML = '<div class="chart-error">차트를 로드하는 중 오류가 발생했습니다. 페이지를 새로고침해주세요.</div>';
                        });
                        return false;
                    }
                    return true;
                }

                // 데이터 유효성 검사 함수
                function validateChartData(data) {
                    if (!data || typeof data !== 'object') return false;
                    
                    const requiredFields = ['lintErrorCount', 'lintWarningCount', 'lintInfoCount'];
                    for (const field of requiredFields) {
                        if (!(field in data)) return false;
                    }
                    
                    return true;
                }

                // 성능 최적화를 위한 데이터 처리
                function optimizeChartData(items, maxItems = 4) {
                    if (!items || !Array.isArray(items)) return { labels: [], data: [] };
                    
                    // 데이터 정렬 및 최적화
                    const sortedItems = [...items].sort((a, b) => b.count - a.count);
                    const topItems = sortedItems.slice(0, maxItems);
                    const otherItems = sortedItems.slice(maxItems);
                    
                    const labels = topItems.map(item => item.name);
                    const data = topItems.map(item => item.count);
                    
                    if (otherItems.length > 0) {
                        const otherCount = otherItems.reduce((sum, item) => sum + item.count, 0);
                        if (otherCount > 0) {
                            labels.push('Others');
                            data.push(otherCount);
                        }
                    }
                    
                    return { labels, data };
                }

                // 차트 생성 함수
                function createChart(canvasId, config) {
                    try {
                        const ctx = document.getElementById(canvasId).getContext('2d');
                        if (!ctx) {
                            throw new Error(`Canvas element not found: ${canvasId}`);
                        }
                        return new Chart(ctx, config);
                    } catch (error) {
                        console.error(`Error creating chart ${canvasId}:`, error);
                        const container = document.getElementById(canvasId).parentElement;
                        container.innerHTML = '<div class="chart-error">차트 생성 중 오류가 발생했습니다.</div>';
                        return null;
                    }
                }

                document.addEventListener('DOMContentLoaded', function() {
                    if (!checkChartJsLoaded()) return;

                    // 차트 생성 전 컨테이너 크기 설정을 위한 지연
                    setTimeout(() => {
                        try {
                            // 데이터 유효성 검사
                            const chartData = {
                                lintErrorCount: '${it.lintErrorCount}',
                                lintWarningCount: '${it.lintWarningCount}',
                                lintInfoCount: '${it.lintInfoCount}'
                            };

                            if (!validateChartData(chartData)) {
                                throw new Error('Invalid chart data');
                            }

                            // 데이터 변환 및 검증
                            const errorCount = Math.max(0, parseInt(chartData.lintErrorCount) || 0);
                            const warningCount = Math.max(0, parseInt(chartData.lintWarningCount) || 0);
                            const infoCount = Math.max(0, parseInt(chartData.lintInfoCount) || 0);

                            // 메인 차트 설정
                            const mainChartConfig = {
                                type: 'bar',
                                data: {
                                    labels: ['Errors', 'Warnings', 'Info'],
                                    datasets: [{
                                        data: [errorCount, warningCount, infoCount],
                                        backgroundColor: ['#dc3545', '#ffc107', '#17a2b8'],
                                        borderWidth: 0,
                                        borderRadius: 4,
                                        barThickness: 30,
                                        maxBarThickness: 35
                                    }]
                                },
                                options: {
                                    indexAxis: 'y',
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    layout: {
                                        padding: {
                                            left: 20,
                                            right: 20,
                                            top: 20,
                                            bottom: 20
                                        }
                                    },
                                    scales: {
                                        x: {
                                            beginAtZero: true,
                                            grid: {
                                                display: true,
                                                color: '#f0f0f0'
                                            },
                                            ticks: {
                                                font: {
                                                    size: 12
                                                }
                                            }
                                        },
                                        y: {
                                            grid: {
                                                display: false
                                            },
                                            ticks: {
                                                font: {
                                                    size: 13,
                                                    weight: 'bold'
                                                }
                                            }
                                        }
                                    },
                                    plugins: {
                                        legend: {
                                            display: false
                                        },
                                        tooltip: {
                                            enabled: true,
                                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                            titleColor: 'white',
                                            bodyColor: 'white',
                                            padding: 10,
                                            displayColors: false,
                                            callbacks: {
                                                title: function(tooltipItems) {
                                                    return tooltipItems[0].label;
                                                },
                                                label: function(tooltipItem) {
                                                    return 'Count: ' + tooltipItem.formattedValue;
                                                }
                                            }
                                        }
                                    }
                                }
                            };

                            // 차트 생성
                            createChart('lintResultsChart', mainChartConfig);
                            
                            // 세부 항목 차트 생성
                            try {
                                const errorData = optimizeChartData(errorItems);
                                const warningData = optimizeChartData(warningItems);
                                const infoData = optimizeChartData(infoItems);

                                console.log('Chart data processed:', {
                                    errorData,
                                    warningData,
                                    infoData
                                });

                                if (errorData.labels.length > 0) {
                                    createDetailsChart('errorDetailsChart', errorData, '#dc3545');
                                } else {
                                    document.querySelector('#error-chart-wrapper').innerHTML = '<div class="chart-error">데이터가 없습니다.</div>';
                                }

                                if (warningData.labels.length > 0) {
                                    createDetailsChart('warningDetailsChart', warningData, '#ffc107');
                                } else {
                                    document.querySelector('#warning-chart-wrapper').innerHTML = '<div class="chart-error">데이터가 없습니다.</div>';
                                }

                                if (infoData.labels.length > 0) {
                                    createDetailsChart('infoDetailsChart', infoData, '#17a2b8');
                                } else {
                                    document.querySelector('#info-chart-wrapper').innerHTML = '<div class="chart-error">데이터가 없습니다.</div>';
                                }
                            } catch (error) {
                                console.error('Error processing detail charts:', error);
                                document.querySelectorAll('#error-chart-wrapper, #warning-chart-wrapper, #info-chart-wrapper').forEach(wrapper => {
                                    wrapper.innerHTML = '<div class="chart-error">데이터 처리 중 오류가 발생했습니다.</div>';
                                });
                            }

                            // Quality Score 애니메이션 시작
                            animateQualityScore();
                        } catch (error) {
                            console.error('Error initializing charts:', error);
                            document.querySelectorAll('.chart-card').forEach(card => {
                                card.innerHTML = '<div class="chart-error">데이터 처리 중 오류가 발생했습니다.</div>';
                            });
                        }
                    }, 100);
                });

                function createDetailsChart(canvasId, chartData, color) {
                    const ctx = document.getElementById(canvasId).getContext('2d');
                    
                    const config = {
                        type: 'bar',
                        data: {
                            labels: chartData.labels,
                            datasets: [{
                                data: chartData.data,
                                backgroundColor: color,
                                borderWidth: 0,
                                borderRadius: 4,
                                barThickness: 30,
                                maxBarThickness: 35
                            }]
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            maintainAspectRatio: false,
                            layout: {
                                padding: {
                                    left: 20,
                                    right: 20,
                                    top: 20,
                                    bottom: 20
                                }
                            },
                            scales: {
                                x: {
                                    beginAtZero: true,
                                    grid: {
                                        display: true,
                                        color: '#f0f0f0'
                                    },
                                    ticks: {
                                        font: {
                                            size: 12
                                        }
                                    }
                                },
                                y: {
                                    grid: {
                                        display: false
                                    },
                                    ticks: {
                                        font: {
                                            size: 12
                                        }
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    enabled: true,
                                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                    titleColor: 'white',
                                    bodyColor: 'white',
                                    padding: 10,
                                    displayColors: false,
                                    callbacks: {
                                        title: function(tooltipItems) {
                                            return tooltipItems[0].label;
                                        },
                                        label: function(tooltipItem) {
                                            return 'Count: ' + tooltipItem.formattedValue;
                                        }
                                    }
                                }
                            }
                        }
                    };
                    
                    new Chart(ctx, config);
                }
                
                // Details 섹션 토글
                function toggleSection(header) {
                    const section = header.parentElement;
                    const content = section.querySelector('.section-content');
                    const icon = header.querySelector('.toggle-icon');
                    
                    content.style.display = content.style.display === 'none' ? 'block' : 'none';
                    icon.textContent = content.style.display === 'none' ? '▼' : '▲';
                }
                
                function toggleCheck(header) {
                    const item = header.parentElement;
                    const details = item.querySelector('.check-details');
                    const icon = header.querySelector('.toggle-icon');
                    
                    details.style.display = details.style.display === 'none' ? 'block' : 'none';
                    icon.textContent = details.style.display === 'none' ? '▼' : '▲';
                }
            ]]></script>
            
            <style><![CDATA[
                .info-section {
                    margin: 20px 0;
                    background: white;
                    padding: 20px;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                
                .info-grid {
                    display: grid;
                    grid-template-columns: 1fr 2fr;
                    gap: 40px;
                }
                
                .info-row {
                    margin: 10px 0;
                }
                
                .info-label {
                    font-weight: bold;
                    color: #666;
                    margin-right: 10px;
                }
                
                .quality-score {
                    text-align: center;
                }

                .score-bar {
                    margin: 20px 0;
                }

                .score-track {
                    height: 30px;
                    background: #f0f0f0;
                    border-radius: 15px;
                    position: relative;
                    overflow: visible;
                    margin-top: 40px;
                }

                .score-sections {
                    display: flex;
                    height: 100%;
                    position: relative;
                    z-index: 1;
                }

                .section {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-weight: bold;
                    text-transform: uppercase;
                    font-size: 12px;
                }

                .section.poor {
                    flex: 5;  /* 0-50% */
                    background: #dc3545;
                    border-radius: 15px 0 0 15px;
                }

                .section.normal {
                    flex: 3;  /* 50-80% */
                    background: #ffc107;
                }

                .section.good {
                    flex: 2;  /* 80-100% */
                    background: #28a745;
                    border-radius: 0 15px 15px 0;
                }

                .score-value {
                    position: absolute;
                    top: -40px;
                    left: 0;
                    width: 100%;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    z-index: 2;
                }

                .score-bubble {
                    position: absolute;
                    left: 0;
                    padding: 6px 12px;
                    border-radius: 15px;
                    transform: translateX(-50%);
                    background: white;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                }

                .score-bubble.poor {
                    color: #dc3545;
                    background-color: rgba(220, 53, 69, 0.1);
                }

                .score-bubble.normal {
                    color: #ffc107;
                    background-color: rgba(255, 193, 7, 0.1);
                }

                .score-bubble.good {
                    color: #28a745;
                    background-color: rgba(40, 167, 69, 0.1);
                }

                .score-marker {
                    position: absolute;
                    left: 0;
                    top: 25px;
                    transform: translateX(-50%);
                    width: 0;
                    height: 0;
                    border-left: 8px solid transparent;
                    border-right: 8px solid transparent;
                    border-top: 8px solid;
                    z-index: 1;
                }

                .score-marker.poor {
                    border-top-color: #dc3545;
                }

                .score-marker.normal {
                    border-top-color: #ffc107;
                }

                .score-marker.good {
                    border-top-color: #28a745;
                }

                .score-bubble .value {
                    font-size: 16px;
                    font-weight: bold;
                    white-space: nowrap;
                    display: block;
                    text-align: center;
                }
                
                .score-label {
                    margin-top: 10px;
                    font-weight: bold;
                    color: #666;
                }
                
                .results-section {
                    margin: 40px 0;
                }
                
                .results-grid {
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    gap: 20px;
                    margin: 20px 0;
                    min-height: 800px;
                }
                
                .chart-card {
                    background: white;
                    padding: 20px;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    display: flex;
                    flex-direction: column;
                    height: 100%;
                }
                
                .chart-card h3 {
                    margin: 0 0 20px 0;
                    text-align: center;
                    flex: 0 0 auto;
                }
                
                #chart-wrapper,
                #error-chart-wrapper,
                #warning-chart-wrapper,
                #info-chart-wrapper {
                    flex: 1 1 auto;
                    position: relative;
                    width: 100%;
                    height: 300px !important;
                }
                
                canvas {
                    width: 100% !important;
                    height: 100% !important;
                }
                
                .details-section {
                    margin: 40px 0;
                }
                
                .check-section {
                    margin: 20px 0;
                    background: white;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    overflow: hidden;
                }
                
                .section-header {
                    padding: 15px 20px;
                    background: #f8f9fa;
                    cursor: pointer;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                
                .section-header h3 {
                    margin: 0;
                }
                
                .section-content {
                    padding: 20px;
                }
                
                .check-item {
                    margin: 10px 0;
                }
                
                .check-header {
                    padding: 10px;
                    background: #f8f9fa;
                    border-radius: 4px;
                    cursor: pointer;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                
                .check-meta {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }
                
                .check-category {
                    padding: 2px 6px;
                    border-radius: 3px;
                    font-size: 12px;
                    font-weight: bold;
                }
                
                .error .check-category { background: #dc3545; color: white; }
                .warning .check-category { background: #ffc107; color: black; }
                .info .check-category { background: #17a2b8; color: white; }
                
                .check-count {
                    font-weight: bold;
                }
                
                .check-details {
                    display: none;
                    padding: 15px;
                    background: white;
                    border: 1px solid #eee;
                    border-radius: 4px;
                    margin-top: 5px;
                }
                
                .check-description {
                    margin-bottom: 10px;
                    color: #666;
                }
                
                .occurrence-list {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                }
                
                .occurrence-item {
                    padding: 5px 0;
                    border-bottom: 1px solid #eee;
                }
                
                .occurrence-item:last-child {
                    border-bottom: none;
                }
                
                .toggle-icon {
                    font-size: 12px;
                    color: #666;
                }

                /* 반응형 디자인 */
                @media (max-width: 1200px) {
                    .results-grid {
                        grid-template-columns: 1fr;
                        min-height: 1600px;
                    }
                    
                    .chart-card {
                        height: 400px;
                    }
                }

                @media (max-width: 768px) {
                    .info-grid {
                        grid-template-columns: 1fr;
                        gap: 20px;
                    }
                    
                    .results-grid {
                        gap: 15px;
                    }
                    
                    .chart-card {
                        height: 350px;
                    }
                    
                    #chart-wrapper,
                    #error-chart-wrapper,
                    #warning-chart-wrapper,
                    #info-chart-wrapper {
                        height: 250px !important;
                    }
                }

                @media (max-width: 480px) {
                    .chart-card {
                        height: 300px;
                    }
                    
                    #chart-wrapper,
                    #error-chart-wrapper,
                    #warning-chart-wrapper,
                    #info-chart-wrapper {
                        height: 200px !important;
                    }
                }

                /* 오류 메시지 스타일 */
                .chart-error {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    height: 100%;
                    color: #dc3545;
                    font-weight: bold;
                    text-align: center;
                    padding: 20px;
                }
            ]]></style>
        </l:main-panel>
    </l:layout>
</j:jelly> 